{"ast":null,"code":"var _jsxFileName = \"/Users/dyland/Desktop/Sem7/CS222/frontend/src/components/StockPredictionChart.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { supabase } from '../utils/supabaseClient';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default function StockPredictionChart() {\n  _s();\n  const [predictionData, setPredictionData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPredictions = async () => {\n      try {\n        const {\n          data,\n          error: supabaseError\n        } = await supabase.from('stock_predictions').select('*').order('date', {\n          ascending: true\n        });\n        if (supabaseError) throw supabaseError;\n        setPredictionData(data || []);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch data');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPredictions();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading predictions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 21\n  }, this);\n  const chartData = {\n    labels: predictionData.map(d => d.date),\n    datasets: [{\n      label: 'Actual Price',\n      data: predictionData.map(d => d.actual_price),\n      borderColor: 'rgb(75, 192, 192)',\n      tension: 0.1\n    }, {\n      label: 'Predicted Price',\n      data: predictionData.map(d => d.predicted_price),\n      borderColor: 'rgb(255, 99, 132)',\n      tension: 0.1\n    }]\n  };\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Stock Price Predictions'\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n        title: {\n          display: true,\n          text: 'Price ($)'\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-full max-w-4xl mx-auto p-4\",\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n_s(StockPredictionChart, \"CcNzVFfcw81pCfObogymxF1z/KU=\");\n_c = StockPredictionChart;\nvar _c;\n$RefreshReg$(_c, \"StockPredictionChart\");","map":{"version":3,"names":["useEffect","useState","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","supabase","jsxDEV","_jsxDEV","register","StockPredictionChart","_s","predictionData","setPredictionData","loading","setLoading","error","setError","fetchPredictions","data","supabaseError","from","select","order","ascending","err","Error","message","children","fileName","_jsxFileName","lineNumber","columnNumber","chartData","labels","map","d","date","datasets","label","actual_price","borderColor","tension","predicted_price","options","responsive","plugins","legend","position","title","display","text","scales","y","beginAtZero","className","_c","$RefreshReg$"],"sources":["/Users/dyland/Desktop/Sem7/CS222/frontend/src/components/StockPredictionChart.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport { supabase } from '../utils/supabaseClient';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface PredictionData {\n  date: string;\n  actual_price: number;\n  predicted_price: number;\n  ticker: string;\n}\n\nexport default function StockPredictionChart() {\n  const [predictionData, setPredictionData] = useState<PredictionData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchPredictions = async () => {\n      try {\n        const { data, error: supabaseError } = await supabase\n          .from('stock_predictions')\n          .select('*')\n          .order('date', { ascending: true });\n\n        if (supabaseError) throw supabaseError;\n        setPredictionData(data || []);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to fetch data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchPredictions();\n  }, []);\n\n  if (loading) return <div>Loading predictions...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  const chartData = {\n    labels: predictionData.map(d => d.date),\n    datasets: [\n      {\n        label: 'Actual Price',\n        data: predictionData.map(d => d.actual_price),\n        borderColor: 'rgb(75, 192, 192)',\n        tension: 0.1\n      },\n      {\n        label: 'Predicted Price',\n        data: predictionData.map(d => d.predicted_price),\n        borderColor: 'rgb(255, 99, 132)',\n        tension: 0.1\n      }\n    ]\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: 'Stock Price Predictions'\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n        title: {\n          display: true,\n          text: 'Price ($)'\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-4xl mx-auto p-4\">\n      <Line data={chartData} options={options} />\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}